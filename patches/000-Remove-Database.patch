Index: src/main/java/co/foxdev/foxbot/commands/CommandTell.java
===================================================================
--- src/main/java/co/foxdev/foxbot/commands/CommandTell.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/commands/CommandTell.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
@@ -1,84 +0,0 @@
-/*
- * This file is part of Foxbot.
- *
- *     Foxbot is free software: you can redistribute it and/or modify
- *     it under the terms of the GNU General Public License as published by
- *     the Free Software Foundation, either version 3 of the License, or
- *     (at your option) any later version.
- *
- *     Foxbot is distributed in the hope that it will be useful,
- *     but WITHOUT ANY WARRANTY; without even the implied warranty of
- *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *     GNU General Public License for more details.
- *
- *     You should have received a copy of the GNU General Public License
- *     along with Foxbot. If not, see <http://www.gnu.org/licenses/>.
- */
-
-package co.foxdev.foxbot.commands;
-
-import org.pircbotx.User;
-import org.pircbotx.hooks.events.MessageEvent;
-import co.foxdev.foxbot.FoxBot;
-
-import java.util.List;
-
-public class CommandTell extends Command
-{
-    private final FoxBot foxbot;
-
-    public CommandTell(FoxBot foxbot)
-    {
-        super("tell", "command.tell");
-        this.foxbot = foxbot;
-    }
-
-    @Override
-    public void execute(final MessageEvent event, final String[] args)
-    {
-        User sender = event.getUser();
-
-        if (args.length == 1)
-        {
-            if (args[0].equalsIgnoreCase("list"))
-            {
-                List<String> tells = foxbot.getDatabase().getTells(sender.getNick(), true);
-
-                if (!tells.isEmpty())
-                {
-                    for (String tell : tells)
-                    {
-                        foxbot.sendNotice(sender, foxbot.getUtils().colourise(tell));
-                    }
-                    return;
-                }
-                foxbot.sendNotice(sender, "No messages for you :<");
-                return;
-            }
-
-            if (args[0].equalsIgnoreCase("clean"))
-            {
-                foxbot.getDatabase().cleanTells(sender.getNick());
-                foxbot.sendNotice(sender, "Deleted all of your read messages.");
-                return;
-            }
-        }
-
-        if (args.length > 1)
-        {
-            String nick = args[0];
-
-            StringBuilder message = new StringBuilder(args[1]);
-
-            for (int arg = 2; arg < args.length; arg++)
-            {
-                message.append(" ").append(args[arg]);
-            }
-
-            foxbot.getDatabase().addTell(sender.getNick(), nick, message.toString());
-            foxbot.sendNotice(sender, String.format("Tell added for %s", nick));
-            return;
-        }
-        foxbot.sendNotice(sender, String.format("Wrong number of args! Use %stell <nick> <message> or %stell list", foxbot.getConfig().getCommandPrefix(), foxbot.getConfig().getCommandPrefix()));
-    }
-}
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/utils/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/utils/Utils.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/utils/Utils.java	(revision )
@@ -75,6 +75,7 @@
             for (String line : output.split("\n"))
             {
                 matcher = TITLE_PATTERN.matcher(line);
+
                 if (matcher.find())
                 {
                     title = line.split("<title>")[1].split("</title>")[0];
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/commands/CommandMute.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/commands/CommandMute.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/commands/CommandMute.java	(revision )
@@ -73,10 +73,7 @@
                 reason.append(" ").append(args[arg]);
             }
 
-            long muteTime = System.currentTimeMillis();
-
             foxbot.setMode(channel, "+q ", hostmask);
-            foxbot.getDatabase().addMute(channel, target, reason.toString(), sender, muteTime);
 
             if (foxbot.getConfig().getUnbanTimer() != 0)
             {
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/commands/CommandBan.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/commands/CommandBan.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/commands/CommandBan.java	(revision )
@@ -75,10 +75,7 @@
 
             foxbot.kick(channel, target, String.format("Ban requested by %s - %s", sender.getNick(), foxbot.getUtils().colourise(reason.toString()) + Colors.NORMAL));
 
-            long banTime = System.currentTimeMillis();
-
             foxbot.ban(channel, hostmask);
-            foxbot.getDatabase().addBan(channel, target, reason.toString(), sender, banTime);
 
             if (foxbot.getConfig().getUnbanTimer() != 0)
             {
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/listeners/UserListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/listeners/UserListener.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/listeners/UserListener.java	(revision )
@@ -71,25 +71,11 @@
                         continue;
                     }
 
-                    long kickTime = System.currentTimeMillis();
-
                     foxbot.kick(channel, user, String.format("The nick '%s' is protected. Either connect with the associated hostmask or do not use that nick.", newNick));
-                    foxbot.getDatabase().addKick(channel, user, String.format("The nick '%s' is protected. Either connect with the associated hostmask or do not use that nick.", newNick), foxbot.getUserBot(), kickTime);
                 }
             }
-            return;
         }
-
-        List<String> tells = foxbot.getDatabase().getTells(user.getNick(), false);
-
-        if (!tells.isEmpty())
-        {
-            for (String tell : tells)
-            {
-                foxbot.sendMessage(user, foxbot.getUtils().colourise(tell));
-            }
+    }
-        }
-    }
 
     @Override
     public void onJoin(JoinEvent<FoxBot> event)
@@ -111,10 +97,7 @@
                 return;
             }
 
-            long kickTime = System.currentTimeMillis();
-
             foxbot.kick(channel, user, String.format("The nick '%s' is protected. Either connect with the associated hostmask or do not use that nick.", nick));
-            foxbot.getDatabase().addKick(channel, user, String.format("The nick '%s' is protected. Either connect with the associated hostmask or do not use that nick.", nick), foxbot.getUserBot(), kickTime);
             return;
         }
 
@@ -127,16 +110,6 @@
             else
             {
                 channel.sendMessage(foxbot.getUtils().colourise(foxbot.getConfig().getGreetingMessage().replace("{USER}", nick).replace("{CHANNEL}", channel.getName()).replace("{CHANUSERS}", String.valueOf(channel.getUsers().size()))));
-            }
-        }
-
-        List<String> tells = foxbot.getDatabase().getTells(nick, false);
-
-        if (!tells.isEmpty())
-        {
-            for (String tell : tells)
-            {
-                foxbot.sendMessage(user, foxbot.getUtils().colourise(tell));
             }
         }
     }
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/config/Config.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/config/Config.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/config/Config.java	(revision )
@@ -64,17 +64,6 @@
     private boolean usersMustBeVerified;
     private boolean matchUsersByHostmask;
 
-    // ----------------
-    // Database section
-    // ----------------
-
-    private String databaseType;
-    private String databaseHost;
-    private int databasePort;
-    private String databaseName;
-    private String databaseUser;
-    private String databasePassword;
-
     // -----------------------
     // User-punishment section
     // -----------------------
@@ -166,17 +155,6 @@
         usersMustBeVerified = botConfig.getBoolean("auth.users-must-be-verified");
         matchUsersByHostmask = botConfig.getBoolean("auth.match-users-by-hostmask");
 
-        // ----------------
-        // Database section
-        // ----------------
-
-        databaseType = botConfig.getString("database.type");
-        databaseHost = botConfig.getString("database.host");
-        databasePort = botConfig.getInt("database.port");
-        databaseName = botConfig.getString("database.name");
-        databaseUser = botConfig.getString("database.username");
-        databasePassword = botConfig.getString("database.password");
-
         // -----------------------
         // User-punishment section
         // -----------------------
@@ -299,40 +277,6 @@
     public boolean getMatchUsersByHostmask()
     {
         return matchUsersByHostmask;
-    }
-
-    // ----------------
-    // Database section
-    // ----------------
-
-    public String getDatabaseType()
-    {
-        return databaseType;
-    }
-
-    public String getDatabaseHost()
-    {
-        return databaseHost;
-    }
-
-    public int getDatabasePort()
-    {
-        return databasePort;
-    }
-
-    public String getDatabaseName()
-    {
-        return databaseName;
-    }
-
-    public String getDatabaseUser()
-    {
-        return databaseUser;
-    }
-
-    public String getDatabasePassword()
-    {
-        return databasePassword;
     }
 
     // -----------------------
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/listeners/spamhandler/SpamHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/listeners/spamhandler/SpamHandler.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/listeners/spamhandler/SpamHandler.java	(revision )
@@ -104,9 +104,7 @@
                 // Kick the user if the percentage of caps in their message was higher than the max value
                 if (count > 75)
                 {
-                    long kickTime = System.currentTimeMillis();
                     foxbot.kick(channel, user, "Caps spam (" + count + "%)");
-                    foxbot.getDatabase().addKick(channel, user, "Caps spam (" + count + "%)", foxbot.getUserBot(), kickTime);
                 }
             }
 
@@ -152,29 +150,22 @@
         {
             case 9:
                 foxbot.kick(channel, user, "Antispam ban");
-                long banTime = System.currentTimeMillis();
                 foxbot.ban(channel, hostmask);
                 foxbot.getUtils().scheduleUnban(channel, hostmask, foxbot.getConfig().getUnbanTimer());
                 foxbot.sendMessage(user, "You have been banned for 24 hours for spamming multiple times.");
                 duplicateMap.remove(hostmask);
                 spamRating.asMap().remove(hostmask);
-                foxbot.getDatabase().addBan(channel, user, "Antispam ban", foxbot.getUserBot(), banTime);
                 break;
             case 4:
-                long kickTime = System.currentTimeMillis();
                 foxbot.kick(channel, user, "Antispam kick");
                 foxbot.setMode(channel, "+q " + hostmask);
                 foxbot.getUtils().scheduleModeRemove(channel, hostmask, "q", 60);
                 foxbot.sendMessage(user, "It seems like you are spamming. As such, you have been kicked and muted for 60 seconds. If you continue to spam, you may be banned.");
-                foxbot.getDatabase().addKick(channel, user, "Antispam kick", foxbot.getUserBot(), kickTime);
-                foxbot.getDatabase().addMute(channel, user, "Antispam kickmute", foxbot.getUserBot(), kickTime);
                 break;
             case 2:
-                long muteTime = System.currentTimeMillis();
                 foxbot.setMode(channel, "+q " + hostmask);
                 foxbot.getUtils().scheduleModeRemove(channel, hostmask, "q", 10);
                 foxbot.sendMessage(user, "It seems like you are spamming. As such, you have been muted for 10 seconds. If you continue to spam, you may be kicked or even banned.");
-                foxbot.getDatabase().addMute(channel, user, "Antispam mute", foxbot.getUserBot(), muteTime);
                 break;
             default:
                 break;
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/commands/CommandKill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/commands/CommandKill.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/commands/CommandKill.java	(revision )
@@ -44,8 +44,6 @@
             {
                 foxbot.partChannel(channel, "Killed by " + sender.getNick());
             }
-
-            foxbot.getDatabase().disconnect();
             foxbot.disconnect();
             return;
         }
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/database/Database.java
===================================================================
--- src/main/java/co/foxdev/foxbot/database/Database.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/database/Database.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
@@ -1,420 +0,0 @@
-/*
- * This file is part of Foxbot.
- *
- *     Foxbot is free software: you can redistribute it and/or modify
- *     it under the terms of the GNU General Public License as published by
- *     the Free Software Foundation, either version 3 of the License, or
- *     (at your option) any later version.
- *
- *     Foxbot is distributed in the hope that it will be useful,
- *     but WITHOUT ANY WARRANTY; without even the implied warranty of
- *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *     GNU General Public License for more details.
- *
- *     You should have received a copy of the GNU General Public License
- *     along with Foxbot. If not, see <http://www.gnu.org/licenses/>.
- */
-
-package co.foxdev.foxbot.database;
-
-import org.pircbotx.Channel;
-import org.pircbotx.Colors;
-import org.pircbotx.User;
-import co.foxdev.foxbot.FoxBot;
-
-import java.sql.*;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.List;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-public class Database
-{
-    private final FoxBot foxbot;
-
-    private Connection connection = null;
-    private String databaseType;
-    private String url;
-
-    public Database(FoxBot foxbot)
-    {
-        this.foxbot = foxbot;
-    }
-
-    public void connect()
-    {
-        Statement statement = null;
-
-        databaseType = foxbot.getConfig().getDatabaseType();
-        url = databaseType.equalsIgnoreCase("mysql") ? String.format("jdbc:mysql://%s:%s/%s", foxbot.getConfig().getDatabaseHost(), foxbot.getConfig().getDatabasePort(), foxbot.getConfig().getDatabaseName()) : "jdbc:sqlite:data/bot.db";
-
-        try
-        {
-            if (databaseType.equalsIgnoreCase("sqlite"))
-            {
-                Class.forName("org.sqlite.JDBC");
-            }
-
-            if (databaseType.equalsIgnoreCase("mysql"))
-            {
-                String user = foxbot.getConfig().getDatabaseUser();
-                String password = foxbot.getConfig().getDatabasePassword();
-                connection = DriverManager.getConnection(url, user, password);
-            }
-            else
-            {
-                connection = DriverManager.getConnection(url);
-            }
-
-            statement = connection.createStatement();
-
-            statement.setQueryTimeout(30);
-            statement.executeUpdate("CREATE TABLE IF NOT EXISTS tells (tell_time VARCHAR(32), sender VARCHAR(32), receiver VARCHAR(32), message VARCHAR(1024), used TINYINT)");
-            statement.executeUpdate("CREATE TABLE IF NOT EXISTS bans (channel VARCHAR(64), target VARCHAR(32), hostmask VARCHAR(64), reason VARCHAR(1024), banner VARCHAR(32), ban_time BIGINT)");
-            statement.executeUpdate("CREATE TABLE IF NOT EXISTS kicks (channel VARCHAR(64), target VARCHAR(32), hostmask VARCHAR(64), reason VARCHAR(1024), kicker VARCHAR(32), kick_time BIGINT)");
-            statement.executeUpdate("CREATE TABLE IF NOT EXISTS mutes (channel VARCHAR(64), target VARCHAR(32), hostmask VARCHAR(64), reason VARCHAR(1024), muter VARCHAR(32), mute_time BIGINT)");
-        }
-        catch (SQLException | ClassNotFoundException ex)
-        {
-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            foxbot.disconnect();
-        }
-        finally
-        {
-            try
-            {
-                if (statement != null)
-                {
-                    statement.close();
-                }
-                if (connection != null)
-                {
-                    connection.close();
-                    connection = null;
-                }
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-    }
-
-    public void reconnect()
-    {
-        if (connection == null)
-        {
-            try
-            {
-                if (databaseType.equalsIgnoreCase("sqlite"))
-                {
-                    Class.forName("org.sqlite.JDBC");
-                }
-
-                if (databaseType.equalsIgnoreCase("mysql"))
-                {
-                    String user = foxbot.getConfig().getDatabaseUser();
-                    String password = foxbot.getConfig().getDatabasePassword();
-                    connection = DriverManager.getConnection(url, user, password);
-                }
-                else
-                {
-                    connection = DriverManager.getConnection(url);
-                }
-            }
-            catch (SQLException | ClassNotFoundException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-                foxbot.disconnect();
-            }
-        }
-    }
-
-    public void addTell(String sender, String receiver, String message)
-    {
-        this.reconnect();
-
-        PreparedStatement statement = null;
-
-        try
-        {
-            connection.setAutoCommit(false);
-            statement = connection.prepareStatement("INSERT INTO tells (tell_time, sender, receiver, message, used) VALUES (?, ?, ?, ?, 0);");
-            statement.setString(1, new SimpleDateFormat("[yyyy-MM-dd - HH:mm:ss]").format(Calendar.getInstance().getTimeInMillis()));
-            statement.setString(2, sender);
-            statement.setString(3, receiver);
-            statement.setString(4, message);
-            statement.executeUpdate();
-            connection.commit();
-        }
-        catch (SQLException ex)
-        {
-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-        }
-        finally
-        {
-            try
-            {
-                if (statement != null)
-                {
-                    statement.close();
-                }
-                if (connection != null)
-                {
-                    connection.close();
-                    connection = null;
-                }
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-    }
-
-    public List<String> getTells(String user, Boolean showAll)
-    {
-        this.reconnect();
-
-        List<String> tells = new ArrayList<>();
-        PreparedStatement statement = null;
-        ResultSet rs = null;
-
-        try
-        {
-            statement = connection.prepareStatement(showAll ? "SELECT * FROM tells WHERE receiver = ?" : "SELECT * FROM tells WHERE receiver = ? AND used = 0");
-            statement.setString(1, user);
-            connection.setAutoCommit(true);
-            rs = statement.executeQuery();
-
-            while (rs.next())
-            {
-                tells.add(String.format("%s %sMessage from: %s%s %sMessage: %s%s", rs.getString("tell_time"), Colors.GREEN, Colors.NORMAL, rs.getString("sender"), Colors.GREEN, Colors.NORMAL, rs.getString("message")));
-            }
-
-            statement = connection.prepareStatement("UPDATE tells SET used = 1 WHERE receiver = ? AND used = 0");
-            statement.setString(1, user);
-            statement.executeUpdate();
-        }
-        catch (SQLException ex)
-        {
-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-        }
-        finally
-        {
-            try
-            {
-                if (statement != null)
-                {
-                    statement.close();
-                }
-                if (connection != null)
-                {
-                    connection.close();
-                    connection = null;
-                }
-                if (rs != null)
-                {
-                    rs.close();
-                }
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-        return tells;
-    }
-
-    public void cleanTells(String user)
-    {
-        this.reconnect();
-
-        PreparedStatement statement = null;
-
-        try
-        {
-            statement = connection.prepareStatement("DELETE FROM tells WHERE receiver = ? AND used = 1");
-            statement.setString(1, user);
-            connection.setAutoCommit(true);
-            statement.executeUpdate();
-        }
-        catch (SQLException ex)
-        {
-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-        }
-        finally
-        {
-            try
-            {
-                if (statement != null)
-                {
-                    statement.close();
-                }
-                if (connection != null)
-                {
-                    connection.close();
-                    connection = null;
-                }
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-    }
-
-    public void addBan(Channel channel, User target, String reason, User banner, long time)
-    {
-        this.reconnect();
-
-        PreparedStatement statement = null;
-
-        try
-        {
-            connection.setAutoCommit(false);
-            statement = connection.prepareStatement("INSERT INTO bans (channel, target, hostmask, reason, banner, ban_time) VALUES (?, ?, ?, ?, ?, ?);");
-            statement.setString(1, channel.getName());
-            statement.setString(2, target.getNick());
-            statement.setString(3, target.getHostmask());
-            statement.setString(4, reason);
-            statement.setString(5, banner.getNick());
-            statement.setLong(6, time);
-            statement.executeUpdate();
-            connection.commit();
-        }
-        catch (SQLException ex)
-        {
-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-        }
-        finally
-        {
-            try
-            {
-                if (statement != null)
-                {
-                    statement.close();
-                }
-                if (connection != null)
-                {
-                    connection.close();
-                    connection = null;
-                }
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-    }
-
-    public void addKick(Channel channel, User target, String reason, User kicker, long time)
-    {
-        this.reconnect();
-
-        PreparedStatement statement = null;
-
-        try
-        {
-            connection.setAutoCommit(false);
-            statement = connection.prepareStatement("INSERT INTO kicks (channel, target, hostmask, reason, kicker, kick_time) VALUES (?, ?, ?, ?, ?, ?);");
-            statement.setString(1, channel.getName());
-            statement.setString(2, target.getNick());
-            statement.setString(3, target.getHostmask());
-            statement.setString(4, reason);
-            statement.setString(5, kicker.getNick());
-            statement.setLong(6, time);
-            statement.executeUpdate();
-            connection.commit();
-        }
-        catch (SQLException ex)
-        {
-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-        }
-        finally
-        {
-            try
-            {
-                if (statement != null)
-                {
-                    statement.close();
-                }
-                if (connection != null)
-                {
-                    connection.close();
-                    connection = null;
-                }
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-    }
-
-    public void addMute(Channel channel, User target, String reason, User muter, long time)
-    {
-        this.reconnect();
-
-        PreparedStatement statement = null;
-
-        try
-        {
-            connection.setAutoCommit(false);
-            statement = connection.prepareStatement("INSERT INTO mutes (channel, target, hostmask, reason, muter, mute_time) VALUES (?, ?, ?, ?, ?, ?);");
-            statement.setString(1, target.getNick());
-
-            statement.setString(1, channel.getName());
-            statement.setString(2, target.getNick());
-            statement.setString(3, target.getHostmask());
-            statement.setString(4, reason);
-            statement.setString(5, muter.getNick());
-            statement.setLong(6, time);
-            statement.executeUpdate();
-            connection.commit();
-        }
-        catch (SQLException ex)
-        {
-            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-        }
-        finally
-        {
-            try
-            {
-                if (statement != null)
-                {
-                    statement.close();
-                }
-                if (connection != null)
-                {
-                    connection.close();
-                    connection = null;
-                }
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-        }
-    }
-
-    public void disconnect()
-    {
-        if (connection != null)
-        {
-            try
-            {
-                connection.close();
-                connection = null;
-            }
-            catch (SQLException ex)
-            {
-                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
-            }
-            return;
-        }
-        System.out.println("Database is already disconnected!");
-    }
-}
\ No newline at end of file
Index: src/main/resources/config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/config.yml	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/resources/config.yml	(revision )
@@ -29,21 +29,6 @@
     users-must-be-verified: true
     # Should we match users based on hostmasks? This mode is secure enough that you don't need to use "users-must-be-verified".
     match-users-by-hostmask: true
-# Database settings for bot data storage
-database:
-    # Database type. Can be sqlite or mysql
-    type: sqlite
-    # These settings have no effect in sqlite mode
-    # The address of your MySQL server
-    host: localhost
-    # The MySQL server port
-    port: 3306
-    # The database name
-    name: foxbot
-    # The username for the database
-    username: root
-    # The password for the database
-    password: root
 user-punishment:
     # Should the bot kick anyone who kicks the bot? NOT YET WORKING
     punish-users-on-kick: true
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/FoxBot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/FoxBot.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/FoxBot.java	(revision )
@@ -24,7 +24,6 @@
 import org.reflections.Reflections;
 import co.foxdev.foxbot.commands.Command;
 import co.foxdev.foxbot.config.Config;
-import co.foxdev.foxbot.database.Database;
 import co.foxdev.foxbot.listeners.MessageListener;
 import co.foxdev.foxbot.listeners.UserListener;
 import co.foxdev.foxbot.permissions.PermissionManager;
@@ -53,7 +52,6 @@
     private static PermissionManager permissions;
     private static PluginManager pluginManager;
     private static Utils utils;
-    private static Database database;
     private static Reflections reflections = new Reflections("co.foxdev");
     private static BackgroundListenerManager blm = new BackgroundListenerManager();
 
@@ -78,8 +76,6 @@
         permissions = new PermissionManager(this);
         pluginManager = new PluginManager(this);
         utils = new Utils(this);
-        database = new Database(this);
-        database.connect();
         registerListeners();
         registerCommands();
         setBotInfo();
@@ -180,10 +176,5 @@
     public Utils getUtils()
     {
         return utils;
-    }
-
-    public Database getDatabase()
-    {
-        return database;
     }
 }
\ No newline at end of file
Index: src/main/java/co/foxdev/foxbot/commands/CommandKick.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/co/foxdev/foxbot/commands/CommandKick.java	(revision c3aefd06a50eef45785fc99dc4e57faa2643c6fd)
+++ src/main/java/co/foxdev/foxbot/commands/CommandKick.java	(revision )
@@ -72,10 +72,7 @@
                 reason.append(" ").append(args[arg]);
             }
 
-            long kickTime = System.currentTimeMillis();
-
             foxbot.kick(channel, target, String.format("Kick requested by %s - %s", sender.getNick(), foxbot.getUtils().colourise(reason.toString()) + Colors.NORMAL));
-            foxbot.getDatabase().addKick(channel, target, reason.toString(), sender, kickTime);
             return;
         }
         foxbot.sendNotice(sender, String.format("Wrong number of args! Use %skick <user> <reason>", foxbot.getConfig().getCommandPrefix()));
\ No newline at end of file
